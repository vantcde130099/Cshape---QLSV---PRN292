#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLSV___SQLServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLSV")]
	public partial class DBQLSVDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLop(Lop instance);
    partial void UpdateLop(Lop instance);
    partial void DeleteLop(Lop instance);
    partial void InsertSV(SV instance);
    partial void UpdateSV(SV instance);
    partial void DeleteSV(SV instance);
    #endregion
		
		public DBQLSVDataContext() : 
				base(global::QLSV___SQLServer.Properties.Settings.Default.QLSVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBQLSVDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBQLSVDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBQLSVDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBQLSVDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Lop> Lops
		{
			get
			{
				return this.GetTable<Lop>();
			}
		}
		
		public System.Data.Linq.Table<SV> SVs
		{
			get
			{
				return this.GetTable<SV>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lop")]
	public partial class Lop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDLop;
		
		private string _NameLop;
		
		private EntitySet<SV> _SVs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLopChanging(int value);
    partial void OnIDLopChanged();
    partial void OnNameLopChanging(string value);
    partial void OnNameLopChanged();
    #endregion
		
		public Lop()
		{
			this._SVs = new EntitySet<SV>(new Action<SV>(this.attach_SVs), new Action<SV>(this.detach_SVs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLop", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDLop
		{
			get
			{
				return this._IDLop;
			}
			set
			{
				if ((this._IDLop != value))
				{
					this.OnIDLopChanging(value);
					this.SendPropertyChanging();
					this._IDLop = value;
					this.SendPropertyChanged("IDLop");
					this.OnIDLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameLop", DbType="NVarChar(MAX)")]
		public string NameLop
		{
			get
			{
				return this._NameLop;
			}
			set
			{
				if ((this._NameLop != value))
				{
					this.OnNameLopChanging(value);
					this.SendPropertyChanging();
					this._NameLop = value;
					this.SendPropertyChanged("NameLop");
					this.OnNameLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lop_SV", Storage="_SVs", ThisKey="IDLop", OtherKey="IDLop")]
		public EntitySet<SV> SVs
		{
			get
			{
				return this._SVs;
			}
			set
			{
				this._SVs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SVs(SV entity)
		{
			this.SendPropertyChanging();
			entity.Lop = this;
		}
		
		private void detach_SVs(SV entity)
		{
			this.SendPropertyChanging();
			entity.Lop = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SV")]
	public partial class SV : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SVId;
		
		private string _MSSV;
		
		private string _SVName;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<double> _DTB;
		
		private int _IDLop;
		
		private string _Tel;
		
		private System.Nullable<bool> _CMND;
		
		private System.Nullable<bool> _HocBa;
		
		private System.Nullable<bool> _THPT;
		
		private EntityRef<Lop> _Lop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSVIdChanging(int value);
    partial void OnSVIdChanged();
    partial void OnMSSVChanging(string value);
    partial void OnMSSVChanged();
    partial void OnSVNameChanging(string value);
    partial void OnSVNameChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnDTBChanging(System.Nullable<double> value);
    partial void OnDTBChanged();
    partial void OnIDLopChanging(int value);
    partial void OnIDLopChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnCMNDChanging(System.Nullable<bool> value);
    partial void OnCMNDChanged();
    partial void OnHocBaChanging(System.Nullable<bool> value);
    partial void OnHocBaChanged();
    partial void OnTHPTChanging(System.Nullable<bool> value);
    partial void OnTHPTChanged();
    #endregion
		
		public SV()
		{
			this._Lop = default(EntityRef<Lop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int SVId
		{
			get
			{
				return this._SVId;
			}
			set
			{
				if ((this._SVId != value))
				{
					this.OnSVIdChanging(value);
					this.SendPropertyChanging();
					this._SVId = value;
					this.SendPropertyChanged("SVId");
					this.OnSVIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MSSV", DbType="NVarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MSSV
		{
			get
			{
				return this._MSSV;
			}
			set
			{
				if ((this._MSSV != value))
				{
					this.OnMSSVChanging(value);
					this.SendPropertyChanging();
					this._MSSV = value;
					this.SendPropertyChanged("MSSV");
					this.OnMSSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVName", DbType="NVarChar(MAX)")]
		public string SVName
		{
			get
			{
				return this._SVName;
			}
			set
			{
				if ((this._SVName != value))
				{
					this.OnSVNameChanging(value);
					this.SendPropertyChanging();
					this._SVName = value;
					this.SendPropertyChanged("SVName");
					this.OnSVNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DTB", DbType="Float")]
		public System.Nullable<double> DTB
		{
			get
			{
				return this._DTB;
			}
			set
			{
				if ((this._DTB != value))
				{
					this.OnDTBChanging(value);
					this.SendPropertyChanging();
					this._DTB = value;
					this.SendPropertyChanged("DTB");
					this.OnDTBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLop", DbType="Int NOT NULL")]
		public int IDLop
		{
			get
			{
				return this._IDLop;
			}
			set
			{
				if ((this._IDLop != value))
				{
					if (this._Lop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLopChanging(value);
					this.SendPropertyChanging();
					this._IDLop = value;
					this.SendPropertyChanged("IDLop");
					this.OnIDLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(MAX)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMND", DbType="Bit")]
		public System.Nullable<bool> CMND
		{
			get
			{
				return this._CMND;
			}
			set
			{
				if ((this._CMND != value))
				{
					this.OnCMNDChanging(value);
					this.SendPropertyChanging();
					this._CMND = value;
					this.SendPropertyChanged("CMND");
					this.OnCMNDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HocBa", DbType="Bit")]
		public System.Nullable<bool> HocBa
		{
			get
			{
				return this._HocBa;
			}
			set
			{
				if ((this._HocBa != value))
				{
					this.OnHocBaChanging(value);
					this.SendPropertyChanging();
					this._HocBa = value;
					this.SendPropertyChanged("HocBa");
					this.OnHocBaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THPT", DbType="Bit")]
		public System.Nullable<bool> THPT
		{
			get
			{
				return this._THPT;
			}
			set
			{
				if ((this._THPT != value))
				{
					this.OnTHPTChanging(value);
					this.SendPropertyChanging();
					this._THPT = value;
					this.SendPropertyChanged("THPT");
					this.OnTHPTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lop_SV", Storage="_Lop", ThisKey="IDLop", OtherKey="IDLop", IsForeignKey=true)]
		public Lop Lop
		{
			get
			{
				return this._Lop.Entity;
			}
			set
			{
				Lop previousValue = this._Lop.Entity;
				if (((previousValue != value) 
							|| (this._Lop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lop.Entity = null;
						previousValue.SVs.Remove(this);
					}
					this._Lop.Entity = value;
					if ((value != null))
					{
						value.SVs.Add(this);
						this._IDLop = value.IDLop;
					}
					else
					{
						this._IDLop = default(int);
					}
					this.SendPropertyChanged("Lop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
